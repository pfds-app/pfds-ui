/* tslint:disable */
/* eslint-disable */
/**
 * Pfds Api
 * Pfds
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiResponseError
 */
export interface ApiResponseError {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseError
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseError
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Dummy
 */
export interface Dummy {
    /**
     * 
     * @type {string}
     * @memberof Dummy
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Dummy
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RestUser
 */
export interface RestUser {
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'nic'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'birthDate': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'gender': RestUserGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'apv'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof RestUser
     */
    'updatedAt': string;
    /**
     * 
     * @type {Role}
     * @memberof RestUser
     */
    'role': Role;
}

export const RestUserGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type RestUserGenderEnum = typeof RestUserGenderEnum[keyof typeof RestUserGenderEnum];

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface SigninPayload
 */
export interface SigninPayload {
    /**
     * 
     * @type {string}
     * @memberof SigninPayload
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SigninPayload
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface SignupPayload
 */
export interface SignupPayload {
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'nic'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'birthDate': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'gender': SignupPayloadGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'apv'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'roleId': string;
    /**
     * 
     * @type {string}
     * @memberof SignupPayload
     */
    'password': string;
}

export const SignupPayloadGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type SignupPayloadGenderEnum = typeof SignupPayloadGenderEnum[keyof typeof SignupPayloadGenderEnum];

/**
 * 
 * @export
 * @interface Whoami
 */
export interface Whoami {
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'nic'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'birthDate': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'gender': WhoamiGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'apv'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'updatedAt': string;
    /**
     * 
     * @type {Role}
     * @memberof Whoami
     */
    'role': Role;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'token': string;
}

export const WhoamiGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type WhoamiGenderEnum = typeof WhoamiGenderEnum[keyof typeof WhoamiGenderEnum];


/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDummies: async (page?: any, pageSize?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dummies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                for (const [key, value] of Object.entries(page)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (pageSize !== undefined) {
                for (const [key, value] of Object.entries(pageSize)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateDummies: async (page?: any, pageSize?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dummies/private`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                for (const [key, value] of Object.entries(page)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (pageSize !== undefined) {
                for (const [key, value] of Object.entries(pageSize)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDummies(page?: any, pageSize?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dummy>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDummies(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.getDummies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrivateDummies(page?: any, pageSize?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dummy>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivateDummies(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.getPrivateDummies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ping(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.ping']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDummies(page?: any, pageSize?: any, options?: RawAxiosRequestConfig): AxiosPromise<Array<Dummy>> {
            return localVarFp.getDummies(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateDummies(page?: any, pageSize?: any, options?: RawAxiosRequestConfig): AxiosPromise<Array<Dummy>> {
            return localVarFp.getPrivateDummies(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.ping(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {any} [page] 
     * @param {any} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public getDummies(page?: any, pageSize?: any, options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).getDummies(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} [page] 
     * @param {any} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public getPrivateDummies(page?: any, pageSize?: any, options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).getPrivateDummies(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public ping(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).ping(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {SigninPayload} signinPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signin: async (signinPayload: SigninPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signinPayload' is not null or undefined
            assertParamExists('signin', 'signinPayload', signinPayload)
            const localVarPath = `/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signinPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {SignupPayload} signupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (signupPayload: SignupPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupPayload' is not null or undefined
            assertParamExists('signup', 'signupPayload', signupPayload)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tell who you are
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {SigninPayload} signinPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signin(signinPayload: SigninPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signin(signinPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.signin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {SignupPayload} signupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(signupPayload: SignupPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(signupPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.signup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Tell who you are
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async whoami(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.whoami(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.whoami']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {SigninPayload} signinPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signin(signinPayload: SigninPayload, options?: RawAxiosRequestConfig): AxiosPromise<Whoami> {
            return localVarFp.signin(signinPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {SignupPayload} signupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(signupPayload: SignupPayload, options?: RawAxiosRequestConfig): AxiosPromise<Whoami> {
            return localVarFp.signup(signupPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Tell who you are
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami(options?: RawAxiosRequestConfig): AxiosPromise<Whoami> {
            return localVarFp.whoami(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {SigninPayload} signinPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public signin(signinPayload: SigninPayload, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).signin(signinPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {SignupPayload} signupPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public signup(signupPayload: SignupPayload, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).signup(signupPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tell who you are
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public whoami(options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).whoami(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoleById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [name] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (name?: string, page?: any, pageSize?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                for (const [key, value] of Object.entries(page)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (pageSize !== undefined) {
                for (const [key, value] of Object.entries(pageSize)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [lastName] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (lastName?: string, page?: any, pageSize?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (page !== undefined) {
                for (const [key, value] of Object.entries(page)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (pageSize !== undefined) {
                for (const [key, value] of Object.entries(pageSize)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getRoleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} [name] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(name?: string, page?: any, pageSize?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(name, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} [lastName] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(lastName?: string, page?: any, pageSize?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RestUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(lastName, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
            return localVarFp.getRoleById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} [name] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(name?: string, page?: any, pageSize?: any, options?: RawAxiosRequestConfig): AxiosPromise<Array<Role>> {
            return localVarFp.getRoles(name, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<RestUser> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} [lastName] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(lastName?: string, page?: any, pageSize?: any, options?: RawAxiosRequestConfig): AxiosPromise<Array<RestUser>> {
            return localVarFp.getUsers(lastName, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getRoleById(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getRoleById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} [name] 
     * @param {any} [page] 
     * @param {any} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getRoles(name?: string, page?: any, pageSize?: any, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getRoles(name, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserById(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} [lastName] 
     * @param {any} [page] 
     * @param {any} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(lastName?: string, page?: any, pageSize?: any, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(lastName, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



